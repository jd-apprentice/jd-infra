# A sample workflow which checks out your Infrastructure as Code Configuration files,
# such as Kubernetes, Helm & Terraform and scans them for any security issues.
# The results are then uploaded to GitHub Security Code Scanning
#
# For more examples, including how to limit scans to only high-severity issues
# and fail PR checks, see https://github.com/snyk/actions/

name: Snyk Infrastructure as Code
on:
  push:
    branches: ["main" ]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions: write-all
  
jobs:
  snyk:
    runs-on: ubuntu-latest
    outputs:
      snyk_results: ${{ steps.snyk.outputs.results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install Snyk
        run: |
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - &&\
          sudo apt-get install -y nodejs
          sudo npm install -g snyk

      - name: Run Snyk to check configuration files for security issues
        continue-on-error: true
        id: snyk
        env:
          SNYK_TOKEN: ${{ secrets.TOKEN }}
        run: |
          snyk iac test --severity-threshold=high --sarif-file-output=snyk.sarif
        
      - name: Upload result to Github Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
      
      - name: Save SARIF artifact
        uses: actions/upload-artifact@v2
        with:
          name: code-scanning-results
          path: snyk.sarif
      
  send-message:
    runs-on: ubuntu-latest
    needs: snyk
    steps:
      - name: Download SARIF artifact
        uses: actions/download-artifact@v2
        with:
          name: code-scanning-results
          path: snyk.sarif
      
      - name: Extract Sarif Data
        id: extract-sarif
        run: echo "::set-output name=results::$(cat sarif-results/snyk.sarif)"

      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${{ github.ref }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Action:*\n${{ github.workflow }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Event:*\n${{ github.event_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job:*\n${{ github.job }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Snyk Results:*\n${{ steps.extract-sarif.outputs.results }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
